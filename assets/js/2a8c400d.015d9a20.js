"use strict";(self.webpackChunkselectize_dev=self.webpackChunkselectize_dev||[]).push([[6824],{2005:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=t(7462),l=(t(7294),t(3905));const a={title:"Creating Plugins",description:"creating plugins"},s="Plugin API",o={unversionedId:"plugins",id:"plugins",title:"Creating Plugins",description:"creating plugins",source:"@site/docs/plugins.mdx",sourceDirName:".",slug:"/plugins",permalink:"/docs/plugins",draft:!1,tags:[],version:"current",frontMatter:{title:"Creating Plugins",description:"creating plugins"},sidebar:"docsSidebar",previous:{title:"Contributing to Selectize",permalink:"/docs/contribute"}},r={},u=[{value:"Example Plugins",id:"example-plugins",level:2},{value:"A few notes",id:"a-few-notes",level:3},{value:"Boilerplate",id:"boilerplate",level:2},{value:"Adding dependencies",id:"adding-dependencies",level:2},{value:"Configuration",id:"configuration",level:2},{value:"DOM Events",id:"dom-events",level:2},{value:"Plugin Usage",id:"plugin-usage",level:2},{value:"Without Options",id:"without-options",level:3},{value:"With options",id:"with-options",level:3}],p={toc:u};function d(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"plugin-api"},"Plugin API"),(0,l.kt)("p",null,"Via the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/brianreavis/microplugin.js"},"microplugin interface"),", features can be added to Selectize without modifying the main library. This is great because it protects against code bloat, allows for lean builds, and allows for addons to be sanely isolated. The plugin system isn't meant to be sexy; it's lean, makes very few assumptions, and gives the developer complete control."),(0,l.kt)("h2",{id:"example-plugins"},"Example Plugins"),(0,l.kt)("h3",{id:"a-few-notes"},"A few notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'All plugins live in their own folders in "src/plugins".'),(0,l.kt)("li",{parentName:"ul"},"Plugin names should be in follow the format: ",(0,l.kt)("inlineCode",{parentName:"li"},"/[a-z_]+$")),(0,l.kt)("li",{parentName:"ul"},'JS source should live in a "plugin.js" file (required).'),(0,l.kt)("li",{parentName:"ul"},'CSS should live in a "plugin.less" file (optional). It will be bundled at build time.'),(0,l.kt)("li",{parentName:"ul"},"Plugins are initialized right before the control is setup. This means that if you want to listen for events on any of the control's elements, you should override the ",(0,l.kt)("inlineCode",{parentName:"li"},"setup()")," method.")),(0,l.kt)("h2",{id:"boilerplate"},"Boilerplate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'Selectize.define("plugin_name", function (options) {\n  // options: plugin-specific options\n  // this: Selectize instance\n});\n')),(0,l.kt)("h2",{id:"adding-dependencies"},"Adding dependencies"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'Selectize.define("plugin_name", function (options) {\n  this.require("another_plugin");\n});\n')),(0,l.kt)("h2",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"Methods should be extended by ",(0,l.kt)("a",{parentName:"p",href:"http://coreymaynard.com/blog/extending-a-javascript-function/"},"wrapping them"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"var self = this;\nthis.someMethod = (function () {\n  var original = self.someMethod;\n  return function () {\n    // do your logic\n    return original.apply(this, arguments);\n  };\n})();\n")),(0,l.kt)("h2",{id:"dom-events"},"DOM Events"),(0,l.kt)("p",null,"Because all elements for the control are created within the ",(0,l.kt)("inlineCode",{parentName:"p"},"setup()")," method (which is invoked after the plugin initialized) events should be added by overriding the setup method, like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"Selectize.define('plugin_name', function(options) {\n    var self = this;\n\n    // override the setup method to add an extra `click`  handler\n    this.setup = (function() {\n    var original = self.setup;\n    return function() {\n        original.apply(this, arguments);\n        this.$control.on('click', 'div', function(e) {\n        alert('A div was clicked!');\n        });\n    };\n    })();\n")),(0,l.kt)("h2",{id:"plugin-usage"},"Plugin Usage"),(0,l.kt)("p",null,"For a more detailed description of plugin option formats and how the plugin system works, check out the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/brianreavis/microplugin.js"},"microplugin documentation"),"."),(0,l.kt)("h3",{id:"without-options"},"Without Options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'$("select").selectize({\n  plugins: ["plugin_a", "plugin_b"],\n});\n')),(0,l.kt)("h3",{id:"with-options"},"With options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"$('select').selectize({\n    plugins: {\n        'plugin_a': { /* ... */ },\n        'plugin_b': { /* ... */ }\n    }\n")))}d.isMDXComponent=!0}}]);